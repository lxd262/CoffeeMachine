type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    money = 550
    water = 400
    milk = 540
    coffee_beans = 120
    disposable_cups = 9
    user_action = input("Write action (buy, fill , take, remaining, exit):\n")


    def check_water(req_amount):
        global water
        if water - req_amount >= 0:
            water -= req_amount
            return False
        else:
            return True


    def check_milk(req_amount):
        global milk
        if milk - req_amount >= 0:
            milk -= req_amount
            return False
        else:
            return True


    def check_coffee_beans(req_amount):
        global coffee_beans
        if coffee_beans - req_amount >= 0:
            coffee_beans -= req_amount
            return False
        else:
            return True


    def check_disposable_cups(req_amount):
        global disposable_cups
        if disposable_cups - req_amount >= 0:
            disposable_cups -= req_amount
            return False
        else:
            return True


    def machine_status():
        return (
            "The coffee machine has:\n{0} of water\n{1} of milk\n{2} of coffee beans\n{3} of disposable cups\n${4} of money\n".format(
                str(water), str(milk), str(coffee_beans), str(disposable_cups), str(money)))


    def buy():
        coffee_type = input("\nWhat do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:\n")
        global money, water, milk, coffee_beans, disposable_cups
        if coffee_type == "1":
            if check_water(250):
                return "Sorry, not enough water!"
            if check_coffee_beans(16):
                return "Sorry, not enough coffee beans!"
            if check_disposable_cups(1):
                return "Sorry, not enough disposable cups!"
            money += 4
        elif coffee_type == "2":
            if check_water(350):
                return "Sorry, not enough water!"
            if check_milk(75):
                return "Sorry, not enough milk!"
            if check_coffee_beans(20):
                return "Sorry, not enough coffee beans!"
            if check_disposable_cups(1):
                return "Sorry, not enough disposable cups!"
            money += 7
        elif coffee_type == "3":
            if check_water(200):
                return "Sorry, not enough water!"
            if check_milk(100):
                return "Sorry, not enough milk!"
            if check_coffee_beans(12):
                return "Sorry, not enough coffee beans!"
            if check_disposable_cups(1):
                return "Sorry, not enough disposable cups!"
            money += 6
        elif coffee_type == "back":
            return
        else:
            return "Invalid input, please try again\n"
        return "I have enough resources, making you a coffee!\n"


    def fill():
        global money, water, milk, coffee_beans, disposable_cups
        water += int(input("Write how many ml of water do you want to add:\n"))
        milk += int(input("Write how many ml of milk do you want to add:\n"))
        coffee_beans += int(input("Write how many grams of coffee beans do you want to add:\n"))
        disposable_cups += int(input("Write how many disposable cups of coffee do you want to add:\n"))
        return ""


    def take():
        global money
        money_taken = money
        money = 0
        return "I gave you $" + str(money_taken) + "\n"


    def use():
        global user_action
        while user_action != "exit":
            if user_action == "buy":
                print(buy())
            elif user_action == "fill":
                print(fill())
            elif user_action == "take":
                print(take())
            elif user_action == "remaining":
                print("\n" + machine_status())
            user_action = input("Write action (buy, fill , take, remaining, exit):")


    use()
    # if (milk // 50) < max_coffee_avail:
    #     max_coffee_avail = milk // 50
    # elif (coffee_beans // 15) < max_coffee_avail:
    #     max_coffee_avail = coffee_beans // 15
    # if max_coffee_avail == coffee_needed:
    #     print("Yes, I can make that amount of coffee")
    # elif max_coffee_avail > coffee_needed:
    #     extra_coffee = max_coffee_avail - coffee_needed
    #     print("Yes, I can make that amount of coffee (" + "and even " + str(extra_coffee) +" more that that)")
    # else:
    #     print("No, I can make only " + str(max_coffee_avail) + " cups of coffee")
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/68/stages/371/implement">JetBrains
    Academy</a>
  time: Tue, 18 Aug 2020 02:28:47 UTC
record: -1
